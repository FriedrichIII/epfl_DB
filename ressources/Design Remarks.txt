DESIGN REMARKS:

Required extra checks:

Membership table:
When adding an athlete to the Membership table, one needs to check
- that the athlete does not have two teams of different countries for the same games.
- that the ahtlete does not have two different teams of same event.

Team table, participation relation:
When setting the position of a team, one has to follow this procedure:
- Check whether the element with wanted position is free (for the event)
- if yes put it with given position
- if no, check whether the row with this position is exAequo and this is exAequo
- if yes, increment the position and try again
- if no, insertion failed

DESIGN CHOICES:

Team table:

The use of team table allows the management of a team recieving a  medal (rather than giving a medal to each athlete of the team). This solution can still be used for an athlete to participate alone, being a team of one persone.
We also choose to make a team represent a country. By this way we can manage cases where athletes participate to several games for different countries (change of country or country modification like USSR, Yougoslavia etc.).
The disavantage of this solution is to have to check that an athlete does not represents differents countries for the same games or takes part to the same event in different teams.

Participation table:

We decided to use a participation table with whole ranking instead of recording medals. Even if it takes more space, it provides an intrinsic coherence (and more information). With common constraints and the ones described above, we can avoid that:
1. more than one medal of each kind being attributed unless there is an ex aequo
2. a medal is not attributed
3. a medal is attributed to someone that did not participate to the event
The only drawback is that finding a true ranking when ex aequo happens can require several queries: 
To get the true ranking of a team for a particular event, one must first search for its record using teamId and eventID then check if exAequo is true. If yes, the ranking is given by the true ranking of the first previous non-discalified entry of the same event. Otherwise the true ranking is given by the count of smaller non-discalified position + 1.
Note: the first one in the ranking order of an ex aequo group is not marked as ex aequo. Only the ones who "lost" ranking are marked.
There is also no constraint that the positions have to be continue. It's not necessary (but it would help to solve ex-aequo cases) and it allows to fill the table in any order.
		
No cascade behaviour for foreign keys:
We left the default (restrict) behaviour for our foreign key. The reason why is that where there is a good reason to add cascade (e.g. between participation and event or between discipline and sport), the risk of deleting a lot of data is not balanced by the ease of using cascade. Moreover, there is practically no reason to deletr elements in this table since it's role is mostly to record an history of olympic games.

Enum-like entities:
Season and Sport entities are very simple tables that just restrict the choice
of values in Games resp. Discipline tables.